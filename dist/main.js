(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e,t,i){this.model=e,this.view=t,this.emitter=i}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e,t){this.container=e,this.emitter=t}}},,,function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(5),r=i(6),o=i(10);i(16);const n=new s;new o.default(new r.default(n),null,n)},,function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(7),r=i(3),o=i(8),n=i(9);class a extends s.default{constructor(e){super(e),this.selectedLine="",this.geography=-1,this.lineWeight=-1,this.numFlowLines=15,this.boundary="district",this.mode="all",this.maxFlowLines=30,this.totalData=[],this.activeData=[],this.flowLines=[],this.flowMatrix=[],this.flowMatrixWithClusters={},Promise.all([r.csv("assets/data/od_xy.csv")]).then(([e])=>{for(let t=0;t<e.length;t++){const i=e[t];this.totalData.push(new n.default(parseInt(i.origin_zone),parseInt(i.dest_zone),parseInt(i.origin_district),parseInt(i.dest_district),i.mode_category,parseFloat(i.origin_x),parseFloat(i.origin_y),parseFloat(i.dest_x),parseFloat(i.dest_y),parseInt(i.count)))}this.activeData=this.totalData.filter(e=>"all"===this.mode||e.mode===this.mode),this.dispatchControlsUpdated()})}geographySelected(e,t){this.emitter.emit("removeClusters"),this.selectedLine="",this.lineWeight=-1,this.boundary===t&&this.geography===e?(this.geography=-1,this.emitter.emit("removeFlowLines")):(this.geography=e,this.processData(this.activeData,this.numFlowLines)),this.emitter.emit("selectedUpdated",this.geography),this.dispatchControlsUpdated()}lineSelected(e,t){this.emitter.emit("removeClusters"),this.selectedLine===e?(this.selectedLine="",this.lineWeight=-1,this.splitIntoGroups()):(this.selectedLine=e,this.lineWeight=t,this.emitter.emit("addClusters",{lineKey:e,clusters:this.flowMatrixWithClusters[e]})),this.dispatchControlsUpdated()}decrementFlowLines(){this.emitter.emit("removeClusters"),this.numFlowLines>1&&(this.numFlowLines--,this.processData(this.activeData,this.numFlowLines),this.dispatchControlsUpdated())}incrementFlowLines(){this.emitter.emit("removeClusters"),this.numFlowLines!==this.maxFlowLines&&(this.numFlowLines++,this.processData(this.activeData,this.numFlowLines),this.dispatchControlsUpdated())}updateBoundary(e){this.emitter.emit("removeFlowLines"),this.emitter.emit("removeClusters"),this.geography=-1,this.boundary=e,this.emitter.emit("selectedUpdated",this.geography),this.dispatchControlsUpdated(),this.emitter.emit("boundaryUpdated",this.boundary)}updateMode(e){this.emitter.emit("removeClusters"),this.mode=e,this.activeData=this.totalData.filter(e=>"all"===this.mode||e.mode===this.mode),this.dispatchControlsUpdated(),this.processData(this.activeData,this.numFlowLines)}processData(e,t){let i=0;this.flowMatrix=[],"district"===this.boundary?this.flowMatrix=e.filter(e=>e.destDistrict===this.geography):"zone"===this.boundary&&(this.flowMatrix=e.filter(e=>e.destZone===this.geography));for(let e=0;e<this.flowMatrix.length;e++)i+=this.flowMatrix[e].weight;let s=0;const r=new Array(this.flowMatrix.length);for(let e=0;e<this.flowMatrix.length;e++)s+=this.flowMatrix[e].weight,r[e]=s;if(this.flowLines=[],this.flowMatrix.length<t)this.flowLines=[...this.flowMatrix];else{this.flowLines=new Array(t);for(let e=0;e<this.flowLines.length;e++){const t=Math.floor(Math.random()*i);for(let i=0;i<this.flowMatrix.length;i++)if(r[i]>=t&&-1===this.flowLines.indexOf(this.flowMatrix[i])){this.flowLines[e]=this.flowMatrix[i];break}}this.flowLines=this.flowLines.filter(e=>Boolean(e))}this.flowMatrix.length>0&&this.splitIntoGroups()}splitIntoGroups(){for(let e=0;e<50;e++){this.flowMatrixWithClusters={};for(let e=0;e<this.flowLines.length;e++)this.flowMatrixWithClusters[e]=[];const e=new Array(this.flowMatrix.length);for(let t=0;t<this.flowMatrix.length;t++){const i=this.flowMatrix[t];let s=0,r=Number.POSITIVE_INFINITY;for(let e=0;e<this.flowLines.length;e++){const t=this.flowLines[e],o=Math.sqrt(Math.pow(i.originX-t.originX,2)+Math.pow(i.originY-t.originY,2)+Math.pow(i.destX-t.destX,2)+Math.pow(i.destY-t.destY,2));o<r&&(s=e,r=o)}e[t]=s}for(let t=0;t<this.flowMatrix.length;t++)this.flowMatrixWithClusters[e[t]].push(this.flowMatrix[t]);this.flowLines=a.calcNewFlowLines(this.flowMatrixWithClusters)}this.redrawFlowLines(this.flowLines)}static calcNewFlowLines(e){const t=[];for(const[i]of Object.entries(e)){const s=e[i];let r=0,n=0,a=0,l=0,d=0;for(let e=0;e<s.length;e++){const t=s[e];if(0===t.weight)continue;const i=r+t.weight;l=(l*r+t.originX*t.weight)/i,d=(d*r+t.originY*t.weight)/i,n=(n*r+t.destX*t.weight)/i,a=(a*r+t.destY*t.weight)/i,r=i}t.push(new o.default(i,l,d,n,a,r))}return t}redrawFlowLines(e){let t=Number.MAX_VALUE,i=0;for(let s=0;s<e.length;s++)i=Math.max(e[s].weight,i),t=Math.min(e[s].weight,t);this.emitter.emit("removeFlowLines"),this.emitter.emit("addFlowLines",{lines:e,min:t,max:i})}dispatchControlsUpdated(){this.emitter.emit("controlsUpdated",{geography:this.geography,lineWeight:this.lineWeight,numFlowLines:this.numFlowLines,boundary:this.boundary,mode:this.mode})}}t.default=a},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this.emitter=e}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e,t,i,s,r,o){this.key=e,this.originX=t,this.originY=i,this.destX=s,this.destY=r,this.weight=o}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e,t,i,s,r,o,n,a,l,d){this.originZone=e,this.destZone=t,this.originDistrict=i,this.destDistrict=s,this.mode=r,this.originX=o,this.originY=n,this.destX=a,this.destY=l,this.weight=d}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(0),r=i(11),o=i(13),n=i(14),a=i(15);t.default=class extends s.default{constructor(e,t,i){super(e,t,i),this.mapView=new r.default(document.getElementById("map"),this.emitter),new o.default(this.model,this.mapView,this.emitter),this.emitter.on("selectedUpdated",e=>{this.mapView.updateSelected(e)}),this.emitter.on("boundaryUpdated",e=>{this.mapView.updateBoundary(e)}),this.emitter.on("removeFlowLines",()=>{this.mapView.removeFlowLines()}),this.emitter.on("addFlowLines",({lines:e,min:t,max:i})=>{this.mapView.addFlowLines(e,t,i)}),this.emitter.on("removeClusters",()=>{this.mapView.removeClusters()}),this.emitter.on("addClusters",({lineKey:e,clusters:t})=>{this.mapView.addClusters(e,t)}),this.controlPanelView=new n.default(document.getElementById("control-panel"),this.emitter),new a.default(this.model,this.controlPanelView,this.emitter),this.emitter.on("controlsUpdated",({geography:e,lineWeight:t,numFlowLines:i,boundary:s,mode:r})=>{this.controlPanelView.draw(e,t,i,s,r)})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(1),r=i(12),o=i(17),n=i(3);t.default=class extends s.default{constructor(e,t){super(e,t),this.districtsDrawn=!0,this.zonesDrawn=!1,this.linesDrawn=!1,this.clustersDrawn=!1,o.defs([["EPSG:4326","+title=WGS 84 (long/lat) +proj=longlat +ellps=WGS84 +datum=WGS84 +units=degrees"],["EPSG:3776","+proj=tmerc +lat_0=0 +lon_0=-114 +k=0.9999 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs"]]),r.accessToken="pk.eyJ1IjoidGhvbWFzbG9yaW5jeiIsImEiOiJjamx5aXVwaHAxamZzM3dsaWdkZ3Q2eGJyIn0.mXjlp9c3l2-NBoS1uaEUdw",this.map=new r.Map({container:"map",style:"mapbox://styles/thomaslorincz/cjx0png073khh1cpap7m6449e",center:[-113.323975,53.631611],zoom:7}),this.map.dragRotate.disable(),this.map.on("load",()=>{n.image("assets/images/chevron-32x32.png").then(e=>{const t=document.createElement("canvas").getContext("2d");t.drawImage(e,0,0),this.map.addImage("chevron",{width:32,height:32,data:t.getImageData(0,0,32,32).data})}),this.map.addLayer({id:"districts",source:{type:"vector",url:"mapbox://thomaslorincz.6qk86ot5"},"source-layer":"district-btbn5v",type:"fill",paint:{"fill-color":"rgba(0,0,0,0)","fill-outline-color":"rgba(0,255,255,1)"}}),this.map.addLayer({id:"selectedDistrict",source:{type:"vector",url:"mapbox://thomaslorincz.6qk86ot5"},"source-layer":"district-btbn5v",type:"line",feature_type:"fill",paint:{"line-width":6,"line-color":"rgba(255,0,255,1)"},filter:["in","District",-1]}),this.map.addLayer({id:"zones",source:{type:"vector",url:"mapbox://thomaslorincz.2jka2r5b"},"source-layer":"TAZ-6swaau",type:"fill",paint:{"fill-color":"rgba(0,0,0,0)","fill-outline-color":"rgba(0,255,255,1)"}}),this.map.addLayer({id:"selectedZone",source:{type:"vector",url:"mapbox://thomaslorincz.2jka2r5b"},"source-layer":"TAZ-6swaau",type:"line",feature_type:"fill",paint:{"line-width":6,"line-color":"rgba(255,0,255,1)"},filter:["in","TAZ_New",-1]}),this.map.on("click",e=>{const t=this.map.queryRenderedFeatures(e.point,"districts"),i=this.map.queryRenderedFeatures(e.point,"zones"),s=this.map.queryRenderedFeatures(e.point,"lineLayer");if(this.linesDrawn&&s.length>0){const e=t.filter(e=>"lineLayer"===e.layer.id)[0];if(e)return void this.emitter.emit("lineClicked",e.properties.key,e.properties.magnitude)}if(this.districtsDrawn&&t.length>0){const e=t.filter(e=>"districts"===e.layer.id)[0];e&&this.emitter.emit("districtClicked",e.properties.District)}else if(this.zonesDrawn&&i.length>0){const e=t.filter(e=>"zones"===e.layer.id)[0];e&&this.emitter.emit("zoneClicked",e.properties.TAZ_New)}}),this.map.on("mouseenter","districts",()=>{this.map.getCanvas().style.cursor="pointer"}),this.map.on("mouseleave","districts",()=>{this.map.getCanvas().style.cursor=""}),this.map.on("mouseenter","zones",()=>{this.map.getCanvas().style.cursor="pointer"}),this.map.on("mouseleave","zones",()=>{this.map.getCanvas().style.cursor=""}),this.updateBoundary("district")})}addFlowLines(e,t,i){const s={type:"FeatureCollection",features:[]};for(let r=0;r<e.length;r++){const n=e[r];let a=null;a=t===i?1e3:Math.max((n.weight-t)/(i-t)*1e3,200),s.features.push({type:"Feature",properties:{key:n.key,magnitude:n.weight,"base-width":a},geometry:{type:"LineString",coordinates:[o("EPSG:3776","EPSG:4326",[n.originX,n.originY]),o("EPSG:3776","EPSG:4326",[n.destX,n.destY])]}})}this.map.addLayer({id:"lineLayer",type:"line",source:{type:"geojson",data:s},paint:{"line-color":"#FF0000","line-width":["interpolate",["exponential",2],["zoom"],0,["*",["get","base-width"],["^",2,-16]],24,["*",["get","base-width"],["^",2,8]]],"line-opacity":.8}}),this.map.addLayer({id:"lineArrows",type:"symbol",source:"lineLayer",layout:{"symbol-placement":"line","symbol-spacing":100,"icon-image":"chevron","icon-rotation-alignment":"map","icon-rotate":90,"icon-ignore-placement":!0}}),this.linesDrawn=!0}removeFlowLines(){this.linesDrawn&&(this.map.removeLayer("lineArrows"),this.map.removeLayer("lineLayer"),this.map.removeSource("lineLayer"),this.linesDrawn=!1)}addClusters(e,t){this.map.setFilter("lineLayer",["in","key",e]),this.map.setFilter("lineArrows",["in","key",e]);const i={type:"FeatureCollection",features:[]},s={type:"FeatureCollection",features:[]};for(let e=0;e<t.length;e++){const r=t[e];i.features.push({type:"Feature",properties:{magnitude:Math.max(10*r.weight,32)},geometry:{type:"Point",coordinates:o("EPSG:3776","EPSG:4326",[r.originX,r.originY])}}),s.features.push({type:"Feature",properties:{magnitude:Math.max(10*r.weight,32)},geometry:{type:"Point",coordinates:o("EPSG:3776","EPSG:4326",[r.destX,r.destY])}})}this.map.addLayer({id:"originLayer",type:"circle",source:{type:"geojson",data:i},paint:{"circle-color":"#FFFF00","circle-radius":["interpolate",["exponential",2],["zoom"],0,["*",["get","magnitude"],["^",2,-16]],24,["*",["get","magnitude"],["^",2,8]]],"circle-opacity":.8}}),this.map.addLayer({id:"destLayer",type:"circle",source:{type:"geojson",data:s},paint:{"circle-color":"#00FF00","circle-radius":["interpolate",["exponential",2],["zoom"],0,["*",["get","magnitude"],["^",2,-16]],24,["*",["get","magnitude"],["^",2,8]]],"circle-opacity":.8}}),this.clustersDrawn=!0}removeClusters(){this.clustersDrawn&&(this.map.removeLayer("originLayer"),this.map.removeSource("originLayer"),this.map.removeLayer("destLayer"),this.map.removeSource("destLayer"),this.clustersDrawn=!1,this.map.setFilter("lineLayer",null),this.map.setFilter("lineArrows",null))}updateBoundary(e){"district"===e?(this.map.setLayoutProperty("districts","visibility","visible"),this.map.setLayoutProperty("selectedDistrict","visibility","visible"),this.map.setLayoutProperty("zones","visibility","none"),this.map.setLayoutProperty("selectedZone","visibility","none"),this.districtsDrawn=!0,this.zonesDrawn=!1):"zone"===e&&(this.map.setLayoutProperty("districts","visibility","none"),this.map.setLayoutProperty("selectedDistrict","visibility","none"),this.map.setLayoutProperty("zones","visibility","visible"),this.map.setLayoutProperty("selectedZone","visibility","visible"),this.zonesDrawn=!0,this.districtsDrawn=!1)}updateSelected(e){this.districtsDrawn?this.map.setFilter("selectedDistrict",["in","District",e]):this.zonesDrawn&&this.map.setFilter("selectedZone",["in","TAZ_New",e])}}},,function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(0);t.default=class extends s.default{constructor(e,t,i){super(e,t,i),this.emitter.on("districtClicked",e=>{this.model.geographySelected(e,"district")}),this.emitter.on("zoneClicked",e=>{this.model.geographySelected(e,"zone")}),this.emitter.on("lineClicked",(e,t)=>{this.model.lineSelected(e,t)})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(1);t.default=class extends s.default{constructor(e,t){super(e,t),this.selectedGeography=document.getElementById("selected-geography"),this.selectedLine=document.getElementById("selected-line"),this.flowLinesDecrement=document.getElementById("flow-lines-decrement"),this.flowLinesDecrement.addEventListener("click",()=>{this.emitter.emit("decrementClicked")}),this.numFlowLines=document.getElementById("flow-lines"),this.flowLinesIncrement=document.getElementById("flow-lines-increment"),this.flowLinesIncrement.addEventListener("click",()=>{this.emitter.emit("incrementClicked")}),this.boundaryEntries=document.querySelectorAll(".boundary-entry"),this.boundaryEntries.forEach(e=>{e.addEventListener("click",e=>{e.target instanceof HTMLElement&&this.emitter.emit("boundaryClicked",e.target.dataset.value)})}),this.modeEntries=document.querySelectorAll(".mode-entry"),this.modeEntries.forEach(e=>{e.addEventListener("click",e=>{e.target instanceof HTMLElement&&this.emitter.emit("modeClicked",e.target.dataset.value)})})}draw(e,t,i,s,r){-1===e?(this.selectedGeography.innerText="Nothing Selected",this.selectedGeography.classList.remove("selected-text")):(this.selectedGeography.innerText="district"===s?`District ${e}`:`Zone ${e}`,this.selectedGeography.classList.add("selected-text")),this.selectedLine.innerText=-1===t?"":`Line Trips: ${t}`,this.numFlowLines.innerText=i.toString(),document.querySelectorAll(".content.selected").forEach(e=>{e.querySelector(".content-radio-button").innerHTML="radio_button_unchecked",e.classList.remove("selected")});const o=document.getElementById(`boundary-${s}`);o&&(o.querySelector(".content-radio-button").innerHTML="radio_button_checked",o.classList.add("selected"));const n=document.getElementById(`mode-${r}`);n&&(n.querySelector(".content-radio-button").innerHTML="radio_button_checked",n.classList.add("selected"))}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(0);t.default=class extends s.default{constructor(e,t,i){super(e,t,i),this.emitter.on("decrementClicked",()=>{this.model.decrementFlowLines()}),this.emitter.on("incrementClicked",()=>{this.model.incrementFlowLines()}),this.emitter.on("boundaryClicked",e=>{this.model.updateBoundary(e)}),this.emitter.on("modeClicked",e=>{this.model.updateMode(e)})}}},function(e,t,i){}],[[4,1,2]]]);