(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[,,,,,function(t,e,i){"use strict";class s{constructor(t,e,i){this.model=t,this.view=e,this.emitter=i}}class o{constructor(t,e){this.container=t,this.emitter=e}}var r=i(2),n=i.n(r),a=i(0),l=i(1);class h extends o{constructor(t,e){super(t,e),a.a.defs([["EPSG:4326","+title=WGS 84 (long/lat) +proj=longlat +ellps=WGS84 +datum=WGS84 +units=degrees"],["EPSG:3776","+proj=tmerc +lat_0=0 +lon_0=-114 +k=0.9999 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs"]]),n.a.accessToken="pk.eyJ1IjoidGhvbWFzbG9yaW5jeiIsImEiOiJjamx5aXVwaHAxamZzM3dsaWdkZ3Q2eGJyIn0.mXjlp9c3l2-NBoS1uaEUdw",this.map=new n.a.Map({container:"map",style:"mapbox://styles/thomaslorincz/cjx0png073khh1cpap7m6449e",center:[-113.323975,53.631611],zoom:7}),this.map.dragRotate.disable(),this.districtsDrawn=!0,this.zonesDrawn=!1,this.linesDrawn=!1,this.clustersDrawn=!1,this.map.on("load",()=>{l.b("assets/images/chevron-32x32.png").then(t=>{const e=document.createElement("canvas").getContext("2d");e.drawImage(t,0,0),this.map.addImage("chevron",{width:32,height:32,data:e.getImageData(0,0,32,32).data})}),this.map.addLayer({id:"districts",source:{type:"vector",url:"mapbox://thomaslorincz.6qk86ot5"},"source-layer":"district-btbn5v",type:"fill",paint:{"fill-color":"rgba(0,0,0,0)","fill-outline-color":"rgba(0,255,255,1)"}}),this.map.addLayer({id:"selectedDistrict",source:{type:"vector",url:"mapbox://thomaslorincz.6qk86ot5"},"source-layer":"district-btbn5v",type:"line",feature_type:"fill",paint:{"line-width":6,"line-color":"rgba(255,0,255,1)"},filter:["in","District",-1]}),this.map.addLayer({id:"zones",source:{type:"vector",url:"mapbox://thomaslorincz.2jka2r5b"},"source-layer":"TAZ-6swaau",type:"fill",paint:{"fill-color":"rgba(0,0,0,0)","fill-outline-color":"rgba(0,255,255,1)"}}),this.map.addLayer({id:"selectedZone",source:{type:"vector",url:"mapbox://thomaslorincz.2jka2r5b"},"source-layer":"TAZ-6swaau",type:"line",feature_type:"fill",paint:{"line-width":6,"line-color":"rgba(255,0,255,1)"},filter:["in","TAZ_New",-1]}),this.map.on("click",t=>{const e=this.map.queryRenderedFeatures(t.point,"districts"),i=this.map.queryRenderedFeatures(t.point,"zones"),s=this.map.queryRenderedFeatures(t.point,"lineLayer");if(this.linesDrawn&&s.length>0){const t=e.filter(t=>"lineLayer"===t.layer.id)[0];if(t)return void this.emitter.emit("lineClicked",t.properties.key,t.properties.magnitude)}if(this.districtsDrawn&&e.length>0){const t=e.filter(t=>"districts"===t.layer.id)[0];t&&this.emitter.emit("districtClicked",t.properties.District)}else if(this.zonesDrawn&&i.length>0){const t=e.filter(t=>"zones"===t.layer.id)[0];t&&this.emitter.emit("zoneClicked",t.properties.TAZ_New)}}),this.map.on("mouseenter","districts",()=>{this.map.getCanvas().style.cursor="pointer"}),this.map.on("mouseleave","districts",()=>{this.map.getCanvas().style.cursor=""}),this.map.on("mouseenter","zones",()=>{this.map.getCanvas().style.cursor="pointer"}),this.map.on("mouseleave","zones",()=>{this.map.getCanvas().style.cursor=""}),this.updateBoundary("district")})}addFlowLines({lines:t,min:e,max:i}){const s={type:"FeatureCollection",features:[]};for(let o=0;o<t.length;o++){const r=t[o];let n=null;n=e===i?1e3:Math.max((r.weight-e)/(i-e)*1e3,200),s.features.push({type:"Feature",properties:{key:r.key,magnitude:r.weight,"base-width":n},geometry:{type:"LineString",coordinates:[Object(a.a)("EPSG:3776","EPSG:4326",[r.originX,r.originY]),Object(a.a)("EPSG:3776","EPSG:4326",[r.destX,r.destY])]}})}this.map.addLayer({id:"lineLayer",type:"line",source:{type:"geojson",data:s},paint:{"line-color":"#FF0000","line-width":["interpolate",["exponential",2],["zoom"],0,["*",["get","base-width"],["^",2,-16]],24,["*",["get","base-width"],["^",2,8]]],"line-opacity":.8}}),this.map.addLayer({id:"lineArrows",type:"symbol",source:"lineLayer",layout:{"symbol-placement":"line","symbol-spacing":100,"icon-image":"chevron","icon-rotation-alignment":"map","icon-rotate":90,"icon-ignore-placement":!0}}),this.linesDrawn=!0}removeFlowLines(){this.linesDrawn&&(this.map.removeLayer("lineArrows"),this.map.removeLayer("lineLayer"),this.map.removeSource("lineLayer"),this.linesDrawn=!1)}addClusters({lineKey:t,clusters:e}){this.map.setFilter("lineLayer",["in","key",t]),this.map.setFilter("lineArrows",["in","key",t]);const i={type:"FeatureCollection",features:[]},s={type:"FeatureCollection",features:[]};for(let t=0;t<e.length;t++){const o=e[t];i.features.push({type:"Feature",properties:{magnitude:Math.max(10*o.weight,32)},geometry:{type:"Point",coordinates:Object(a.a)("EPSG:3776","EPSG:4326",[o.originX,o.originY])}}),s.features.push({type:"Feature",properties:{magnitude:Math.max(10*o.weight,32)},geometry:{type:"Point",coordinates:Object(a.a)("EPSG:3776","EPSG:4326",[o.destX,o.destY])}})}this.map.addLayer({id:"originLayer",type:"circle",source:{type:"geojson",data:i},paint:{"circle-color":"#FFFF00","circle-radius":["interpolate",["exponential",2],["zoom"],0,["*",["get","magnitude"],["^",2,-16]],24,["*",["get","magnitude"],["^",2,8]]],"circle-opacity":.8}}),this.map.addLayer({id:"destLayer",type:"circle",source:{type:"geojson",data:s},paint:{"circle-color":"#00FF00","circle-radius":["interpolate",["exponential",2],["zoom"],0,["*",["get","magnitude"],["^",2,-16]],24,["*",["get","magnitude"],["^",2,8]]],"circle-opacity":.8}}),this.clustersDrawn=!0}removeClusters(){this.clustersDrawn&&(this.map.removeLayer("originLayer"),this.map.removeSource("originLayer"),this.map.removeLayer("destLayer"),this.map.removeSource("destLayer"),this.clustersDrawn=!1,this.map.setFilter("lineLayer",null),this.map.setFilter("lineArrows",null))}updateBoundary(t){"district"===t?(this.map.setLayoutProperty("districts","visibility","visible"),this.map.setLayoutProperty("selectedDistrict","visibility","visible"),this.map.setLayoutProperty("zones","visibility","none"),this.map.setLayoutProperty("selectedZone","visibility","none"),this.districtsDrawn=!0,this.zonesDrawn=!1):"zone"===t&&(this.map.setLayoutProperty("districts","visibility","none"),this.map.setLayoutProperty("selectedDistrict","visibility","none"),this.map.setLayoutProperty("zones","visibility","visible"),this.map.setLayoutProperty("selectedZone","visibility","visible"),this.zonesDrawn=!0,this.districtsDrawn=!1)}updateSelected(t){this.districtsDrawn?this.map.setFilter("selectedDistrict",["in","District",t]):this.zonesDrawn&&this.map.setFilter("selectedZone",["in","TAZ_New",t])}}class c extends s{constructor(t,e,i){super(t,e,i),this.emitter.on("districtClicked",t=>{this.model.geographySelected(t,"district")}),this.emitter.on("zoneClicked",t=>{this.model.geographySelected(t,"zone")}),this.emitter.on("lineClicked",(t,e)=>{this.model.lineSelected(t,e)})}}class d extends o{constructor(t,e){super(t,e),this.selectedGeography=document.getElementById("selected-geography"),this.selectedLine=document.getElementById("selected-line"),this.iterationNumber=document.getElementById("iteration-number"),this.nextIterationButton=document.getElementById("next-iteration-button"),this.nextIterationButton.addEventListener("click",()=>{this.emitter.emit("nextIterationClicked")}),this.autoIterateButton=document.getElementById("auto-iterate-button"),this.autoIterateButton.addEventListener("click",()=>{this.emitter.emit("autoIterateClicked")}),this.flowLinesDecrement=document.getElementById("flow-lines-decrement"),this.flowLinesDecrement.addEventListener("click",()=>{this.emitter.emit("decrementClicked")}),this.numFlowLines=document.getElementById("flow-lines"),this.flowLinesIncrement=document.getElementById("flow-lines-increment"),this.flowLinesIncrement.addEventListener("click",()=>{this.emitter.emit("incrementClicked")}),this.boundaryEntries=document.querySelectorAll(".boundary-entry"),this.boundaryEntries.forEach(t=>{t.addEventListener("click",t=>{this.emitter.emit("boundaryClicked",t.target.dataset.value)})}),this.modeEntries=document.querySelectorAll(".mode-entry"),this.modeEntries.forEach(t=>{t.addEventListener("click",t=>{this.emitter.emit("modeClicked",t.target.dataset.value)})})}draw({geography:t,lineWeight:e,iteration:i,autoIterate:s,numFlowLines:o,boundary:r,mode:n}){-1===t?(this.selectedGeography.innerText="Nothing Selected",this.selectedGeography.classList.remove("selected-text")):(this.selectedGeography.innerText="district"===r?`District ${t}`:`Zone ${t}`,this.selectedGeography.classList.add("selected-text")),this.selectedLine.innerText=-1===e?"":`Line Trips: ${e}`,this.iterationNumber.innerText=i.toString(),0===i?this.iterationNumber.classList.remove("selected-text"):this.iterationNumber.classList.add("selected-text"),s?this.autoIterateButton.classList.add("pressed"):this.autoIterateButton.classList.remove("pressed"),this.numFlowLines.innerText=o.toString(),document.querySelectorAll(".content.selected").forEach(t=>{t.querySelector(".content-radio-button").innerHTML="radio_button_unchecked",t.classList.remove("selected")});const a=document.getElementById(`boundary-${r}`);a&&(a.querySelector(".content-radio-button").innerHTML="radio_button_checked",a.classList.add("selected"));const l=document.getElementById(`mode-${n}`);l&&(l.querySelector(".content-radio-button").innerHTML="radio_button_checked",l.classList.add("selected"))}}class m extends s{constructor(t,e,i){super(t,e,i),this.emitter.on("nextIterationClicked",()=>{this.model.nextIteration()}),this.emitter.on("autoIterateClicked",()=>{this.model.autoIterate()}),this.emitter.on("decrementClicked",()=>{this.model.decrementFlowLines()}),this.emitter.on("incrementClicked",()=>{this.model.incrementFlowLines()}),this.emitter.on("boundaryClicked",t=>{this.model.updateBoundary(t)}),this.emitter.on("modeClicked",t=>{this.model.updateMode(t)})}}i.d(e,"a",function(){return u});class u extends s{constructor(t,e,i){super(t,e,i),this.emitter=i,this.mapView=new h(document.getElementById("map"),this.emitter),new c(this.model,this.mapView,this.emitter),this.emitter.on("selectedUpdated",t=>{this.mapView.updateSelected(t)}),this.emitter.on("boundaryUpdated",t=>{this.mapView.updateBoundary(t)}),this.emitter.on("removeFlowLines",()=>{this.mapView.removeFlowLines()}),this.emitter.on("addFlowLines",t=>{this.mapView.addFlowLines(t)}),this.emitter.on("removeClusters",()=>{this.mapView.removeClusters()}),this.emitter.on("addClusters",t=>{this.mapView.addClusters(t)}),this.controlPanelView=new d(document.getElementById("control-panel"),this.emitter),new m(this.model,this.controlPanelView,this.emitter),this.emitter.on("controlsUpdated",t=>{this.controlPanelView.draw(t)})}}},function(t,e,i){"use strict";class s{constructor(t){this.emitter=t}}var o=i(1);class r{constructor(t,e,i,s,o,r){this.key=t,this.originX=e,this.originY=i,this.destX=s,this.destY=o,this.weight=r}}i.d(e,"a",function(){return n});class n extends s{constructor(t){super(t),this.selectedLine="",this.controlPanel={geography:-1,lineWeight:-1,iteration:0,autoIterate:!1,numFlowLines:15,boundary:"district",mode:"X"},this.maxFlowLines=30,this.totalData=[],Promise.all([o.a("assets/data/od_xy.csv")]).then(([t])=>{for(let e=0;e<t.length;e++){const i=t[e];this.totalData.push({originZone:parseInt(i.origin_zone),destZone:parseInt(i.dest_zone),originDistrict:parseInt(i.origin_district),destDistrict:parseInt(i.dest_district),mode:i.mode_category,originX:parseFloat(i.origin_x),originY:parseFloat(i.origin_y),destX:parseFloat(i.dest_x),destY:parseFloat(i.dest_y),weight:parseInt(i.count)})}this.activeData=this.totalData.filter(t=>"X"===this.controlPanel.mode||t.mode===this.controlPanel.mode),this.emitter.emit("controlsUpdated",this.controlPanel)}),this.flowLines=[],this.flowMatrix=[],this.flowMatrixWithClusters={},this.autoIterateInterval=null}geographySelected(t,e){this.emitter.emit("removeClusters"),this.selectedLine="",this.controlPanel.lineWeight=-1,this.controlPanel.boundary===e&&this.controlPanel.geography===t?(this.controlPanel.geography=-1,this.controlPanel.iteration=0,this.emitter.emit("removeFlowLines")):(this.controlPanel.geography=t,this.controlPanel.iteration=1,this.processData(this.activeData,this.controlPanel.numFlowLines)),this.emitter.emit("selectedUpdated",this.controlPanel.geography),this.emitter.emit("controlsUpdated",this.controlPanel)}lineSelected(t,e){this.emitter.emit("removeClusters"),this.selectedLine===t?(this.selectedLine="",this.controlPanel.lineWeight=-1,this.splitIntoGroups()):(this.selectedLine=t,this.controlPanel.lineWeight=e,this.emitter.emit("addClusters",{lineKey:t,clusters:this.flowMatrixWithClusters[t]})),this.emitter.emit("controlsUpdated",this.controlPanel)}nextIteration(){this.emitter.emit("removeClusters"),this.controlPanel.iteration++,this.emitter.emit("controlsUpdated",this.controlPanel),this.splitIntoGroups()}autoIterate(){this.emitter.emit("removeClusters"),this.controlPanel.autoIterate=!this.controlPanel.autoIterate,this.emitter.emit("controlsUpdated",this.controlPanel),this.controlPanel.autoIterate?this.autoIterateInterval=setInterval(()=>{this.controlPanel.iteration++,this.emitter.emit("controlsUpdated",this.controlPanel),this.splitIntoGroups()},100):clearInterval(this.autoIterateInterval)}decrementFlowLines(){this.emitter.emit("removeClusters"),this.controlPanel.numFlowLines>1&&(this.controlPanel.numFlowLines--,this.controlPanel.iteration=1,this.processData(this.activeData,this.controlPanel.numFlowLines),this.emitter.emit("controlsUpdated",this.controlPanel))}incrementFlowLines(){this.emitter.emit("removeClusters"),this.controlPanel.numFlowLines!==this.maxFlowLines&&(this.controlPanel.numFlowLines++,this.controlPanel.iteration=1,this.processData(this.activeData,this.controlPanel.numFlowLines),this.emitter.emit("controlsUpdated",this.controlPanel))}updateBoundary(t){this.emitter.emit("removeFlowLines"),this.emitter.emit("removeClusters"),this.controlPanel.geography=-1,this.controlPanel.iteration=0,this.controlPanel.boundary=t,this.emitter.emit("selectedUpdated",this.controlPanel.geography),this.emitter.emit("controlsUpdated",this.controlPanel),this.emitter.emit("boundaryUpdated",this.controlPanel.boundary)}updateMode(t){this.emitter.emit("removeClusters"),this.controlPanel.iteration=0,this.controlPanel.mode=t,this.activeData=this.totalData.filter(t=>"X"===this.controlPanel.mode||t.mode===this.controlPanel.mode),this.emitter.emit("controlsUpdated",this.controlPanel),this.processData(this.activeData,this.controlPanel.numFlowLines)}processData(t,e){let i=0;this.flowMatrix=[],"district"===this.controlPanel.boundary?this.flowMatrix=t.filter(t=>t.destDistrict===this.controlPanel.geography):"zone"===this.controlPanel.boundary&&(this.flowMatrix=t.filter(t=>t.destZone===this.controlPanel.geography));for(let t=0;t<this.flowMatrix.length;t++)i+=this.flowMatrix[t].weight;let s=0;const o=new Array(this.flowMatrix.length);for(let t=0;t<this.flowMatrix.length;t++)s+=this.flowMatrix[t].weight,o[t]=s;if(this.flowLines=[],this.flowMatrix.length<e)this.flowLines=[...this.flowMatrix];else{this.flowLines=new Array(e);for(let t=0;t<this.flowLines.length;t++){const e=Math.floor(Math.random()*i);for(let i=0;i<this.flowMatrix.length;i++)if(o[i]>=e&&-1===this.flowLines.indexOf(this.flowMatrix[i])){this.flowLines[t]=this.flowMatrix[i];break}}this.flowLines=this.flowLines.filter(t=>t)}this.flowMatrix.length>0&&this.splitIntoGroups()}splitIntoGroups(){this.flowMatrixWithClusters={};for(let t=0;t<this.flowLines.length;t++)this.flowMatrixWithClusters[t]=[];const t=new Array(this.flowMatrix.length);for(let e=0;e<this.flowMatrix.length;e++){const i=this.flowMatrix[e];let s=0,o=Number.POSITIVE_INFINITY;for(let t=0;t<this.flowLines.length;t++){const e=this.flowLines[t],r=Math.sqrt(Math.pow(i.originX-e.originX,2)+Math.pow(i.originY-e.originY,2)+Math.pow(i.destX-e.destX,2)+Math.pow(i.destY-e.destY,2));r<o&&(s=t,o=r)}t[e]=s}for(let e=0;e<this.flowMatrix.length;e++)this.flowMatrixWithClusters[t[e]].push(this.flowMatrix[e]);this.flowLines=n.calcNewFlowLines(this.flowMatrixWithClusters),this.redrawFlowLines(this.flowLines)}static calcNewFlowLines(t){const e=[];for(const[i]of Object.entries(t)){const s=t[i];let o=0,n=0,a=0,l=0,h=0;for(let t=0;t<s.length;t++){const e=s[t];if(0===e.weight)continue;const i=o+e.weight;l=(l*o+e.originX*e.weight)/i,h=(h*o+e.originY*e.weight)/i,n=(n*o+e.destX*e.weight)/i,a=(a*o+e.destY*e.weight)/i,o=i}e.push(new r(i,l,h,n,a,o))}return e}redrawFlowLines(t){let e=Number.MAX_VALUE,i=0;for(let s=0;s<t.length;s++)i=Math.max(t[s].weight,i),e=Math.min(t[s].weight,e);this.emitter.emit("removeFlowLines"),this.emitter.emit("addFlowLines",{lines:t,min:e,max:i})}}},function(t,e,i){"use strict";i.r(e),function(t){var e=i(4),s=i.n(e),o=i(6),r=i(5);i(9);void 0!==t.hot&&t.hot.accept();const n=new s.a;new r.a(new o.a(n),null,n)}.call(this,i(8)(t))},,function(t,e,i){}],[[7,1,2]]]);